
import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFloat;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;


public class DBSCANParameters extends EngineParameters {
	
	// minPts and sqrEps are scalarInput, not paramaters
	//private static final String s_minPts = "minPts";
	//private static final String s_sqrEps = "sqrEps";
	private static final String s_inputType = "inputType";
	private static final String s_numCols = "numCols";
	private static final String s_numPointsCell = "numPointsCell";
	private static final String s_numNeighbour = "numNeighbour";
	
	public DBSCANParameters(String[] args){
		super(args);
	}

	@Override
	protected void declarations(){
		declareParam(s_inputType,		DataType.DFETYPE,	Kernel.dfeFloat(8, 24));
		declareParam(s_numCols,			DataType.INT,		66);
		declareParam(s_numPointsCell,	DataType.INT,		8);
		declareParam(s_numNeighbour,	DataType.INT,		25);
	}

	public DFEType	getInputType()		{	return getParam(s_inputType);		}
	public int		getNumCols()		{	return getParam(s_numCols);			}
	public int		getNumPointsCell()	{	return getParam(s_numPointsCell);	}
	public int		getNumNeighbour()	{	return getParam(s_numNeighbour);	}

	@Override
	protected void validate(){
		if(getNumCols() <= 5){
			throw new IllegalArgumentException("num of cols should be at least be 5");
		}
		if(getNumPointsCell() <= 0){
			throw new IllegalArgumentException("num of points in a cell should > 0");
		}
		if(getNumNeighbour() < 21){
			throw new IllegalArgumentException("num of neighbour should be at least 21 in 2D");
		}
		if (!getInputType().equalsIgnoreMax(Kernel.dfeFloat(8, 24))  &&
		    !getInputType().equalsIgnoreMax(Kernel.dfeFloat(11, 53)) &&
		    !getInputType().equalsIgnoreMax(Kernel.dfeInt(16))       &&
		    !getInputType().equalsIgnoreMax(Kernel.dfeInt(32))) {
	            throw new IllegalArgumentException("CPU code only supports float, double, int16 and int32.");
			}
	}

	public static CPUTypes getType(DFEType type) {
        CPUTypes output;
        if (type.isInt()) {
            switch (type.getTotalBits()) {
	            case 8:
	                output = CPUTypes.INT8;
	                break;
	            case 16:
	                output = CPUTypes.INT16;
	                break;
				case 32:
					output = CPUTypes.INT32;
					break;
				case 64:
					output = CPUTypes.INT64;
					break;
				default:
					throw new RuntimeException("Integer length should be 8, 16, 32, 64");
			}
		} else if(type.isUInt()) {
			switch (type.getTotalBits()) {
				case 8:
					output = CPUTypes.UINT8;
					break;
				case 16:
					output = CPUTypes.UINT16;
					break;
				case 32:
					output = CPUTypes.UINT32;
					break;
				case 64:
					output = CPUTypes.UINT64;
					break;
				default:
					throw new RuntimeException("Integer length should be 8, 16, 32, 64");
			}
		} else if (type instanceof DFEFloat) {
            switch (type.getTotalBits()) {
	            case 32:
	                output = CPUTypes.FLOAT;
	                break;
	            case 64:
	                output = CPUTypes.DOUBLE;
	                break;
	            default:
	                throw new RuntimeException("Floating point inputs and outputs should be float or double");
			}
		} else{
			throw new RuntimeException("Input data not recognized");
		}
		return output;
	}

}

