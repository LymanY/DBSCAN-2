/***
    The manager for this design just streams data from CPU to DFE and back via PCI-E.
*/
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.build.EngineParameters;

public class MatrixMultiplyManager extends CustomManager{

    private static final String s_kernelName  = "MatrixMultiplyKernel";
	// m_num_points_cell have a same defination in kernel.maxj
	private static final int m_num_points_cell = 10;

    MatrixMultiplyManager(EngineParameters ep) {
        super(ep);

        KernelBlock k =
	    addKernel(new MatrixMultiplyKernel(makeKernelParameters(s_kernelName)));

        k.getInput("input") <== addStreamFromCPU("input");
        addStreamToCPU("output") <== k.getOutput("output");
    }

    private static EngineInterface interfaceDefault() {
        EngineInterface engine_interface = new EngineInterface();
        
        InterfaceParam N = engine_interface.addParam("N", CPUTypes.INT); // N means the number of points 
		InterfaceParam Eps = engine_interface.addParam("Eps", CPUTypes.FLOAT);
		InterfaceParam MinPts = engine_interface.addParam("MinPts", CPUTypes.INT);

		// for each cell, iterate m_num_points_cell cycle, to determine all the points in this center cell
		// now the dimension is 2, and we have N * 2 input numbers
        engine_interface.setTicks(s_kernelName, N * 2);
		engine_interface.setScalar(s_kernelName, "eps", Eps);
		engine_interface.setScalar(s_kernelName, "minPts", MinPts);
		
		// * 2 means that the current dimension is 2, and we have N * 2 input numbers
        engine_interface.setStream("input", CPUTypes.FLOAT, N * CPUTypes.FLOAT.sizeInBytes() * 2);
        engine_interface.setStream("output", CPUTypes.FLOAT, N * CPUTypes.FLOAT.sizeInBytes() * 2);
        return engine_interface;
    }

    public static void main(String[] args) {
        MatrixMultiplyManager manager = new MatrixMultiplyManager(new EngineParameters(args));
        manager.createSLiCinterface(interfaceDefault());
        manager.build();
    }
}

